// Import express so we can get a router from it
import express from 'express';

// Import the user service mongodb interface functions 
import { deleteUser, createUser, checkEmailAvailable } from './user_interface.js'

// Import the express validator
import { validationResult, body } from 'express-validator'

// https://www.npmjs.com/package/http-status-codes 
import { StatusCodes } from 'http-status-codes'

// Validation schema for creating a new user
import { createUserValidationSchema } from './ValidationSchemas/createUserValidationSchema.js';

// Create the router for the user service
const userServiceRouter = express.Router();

// Use the express json middleware
userServiceRouter.use(express.json());

/*
    Middleware for the user service request validation.
*/
const userValidationChain = (req, res, next) => {
    // Get all the errors generated by the validation
    const errors = validationResult(req);
    
    //If there are any errors
    if (!errors.isEmpty()) {
        // Return a status code 422 - Unprocessable Entity
        return res.status(StatusCodes.UNPROCESSABLE_ENTITY).json({ errors: errors.array() });
    }

    // Fire off the next middleware
    next();
};


/*
    Route for adding a new user.
*/
userServiceRouter.post('/addUser',
    createUserValidationSchema,
    userValidationChain, // validate the user input
    async (req,res)=>{
        try{
            // Grab the user's information
            const userName = req.body.name
            const userEmail = req.body.email
            const userPassword = req.body.password
            
            // Send a quick check to make sure the email is available
            const emailExistenceCheck = await checkEmailAvailable(userEmail);
            
            // if there is an error in the check
            if('error' in emailExistenceCheck){
                // Respond with the error and a 409(Conflict) status code
                res.status(StatusCodes.CONFLICT).json({
                    error : emailExistenceCheck.error
                })
            }else if('success' in emailExistenceCheck && emailExistenceCheck.matches === 0){
                // If there were no matches to that email
                // Go ahead and create the new account 
                // and return a response
                res.json({
                    response : await createUser(userName, userEmail, userPassword)
                })
            }else {
                res.status(StatusCodes.BAD_REQUEST).json({
                    error : "Bad request detected."
                })
            }
        }catch(err){
            res.status(StatusCodes.BAD_REQUEST).json({
                error : err
            })
        }
})

userServiceRouter.delete('/deleteUser',
    body("id").notEmpty(),
    async (req,res)=>{
        try {
            const userId = req.body.id
            console.log(userId)

            // Log the delete user request
            console.log("Delete user route called with uid:", userId)

            // Send a request to mongo to delete the user using the user interface method
            const response = await deleteUser(userId)

            // Check if there were any errors in the response
            if('error' in response){
                // Log the error
                console.log("Found error while attempting to delete user with id " + userId)
                console.log(response.error)

                // If so return a bad request status code and the errors
                res.status(StatusCodes.BAD_REQUEST).json({
                    error : "There was a problem deleting user with id " + userId,
                })
            }else{
                res.status(StatusCodes.OK).json("Deleted the user with id " + userId)
            }
        } catch (err) {
            res.status(StatusCodes.BAD_REQUEST).json({
                error : err
            })
        }
})

export default userServiceRouter;